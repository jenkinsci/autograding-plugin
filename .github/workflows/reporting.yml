name: 'Generate reports'

on:
  push:
    branches:
      - main

jobs:
  coverage:

    runs-on: [ubuntu-latest]
    name: Reporting on Ubuntu

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          check-latest: true
          cache: 'maven'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.9.5
      - name: Build and test with Maven
        run: mvn -V --color always -ntp clean verify --file pom.xml '-Dgpg.skip' '-Ppit' | tee maven.log
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
      - name: Run Autograding
        uses: uhafner/autograding-github-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          checks-name: 'Grading Badges'
          config: >
            {
              "tests": {
                "tools": [
                  {
                    "id": "test",
                    "name": "Unittests",
                    "pattern": "**/target/*-reports/TEST*.xml"
                  }
                ],
                "name": "JUnit",
                "passedImpact": 0,
                "skippedImpact": -1,
                "failureImpact": -5,
                "maxScore": 100
              },
              "analysis": {
                "name": "Warnings",
                "id": "warnings",
                "tools": [
                  {
                    "id": "checkstyle",
                    "name": "CheckStyle",
                    "pattern": "**/target/checkstyle-result.xml"
                  },
                  {
                    "id": "pmd",
                    "name": "PMD",
                    "pattern": "**/target/pmd.xml"
                  },
                  {
                    "id": "error-prone",
                    "name": "Error Prone",
                    "pattern": "**/maven.log"
                  },
                  {
                    "id": "spotbugs",
                    "name": "SpotBugs",
                    "sourcePath": "src/main/java",
                    "pattern": "**/target/spotbugsXml.xml"
                  }
                ],
                "errorImpact": -1,
                "highImpact": -1,
                "normalImpact": -1,
                "lowImpact": -1,
                "maxScore": 100
              },
              "coverage": [
                {
                  "tools": [
                    {
                      "id": "jacoco",
                      "name": "Line Coverage",
                      "metric": "line",
                      "sourcePath": "src/main/java",
                      "pattern": "**/target/site/jacoco/jacoco.xml"
                    },
                    {
                      "id": "jacoco",
                      "name": "Branch Coverage",
                      "metric": "branch",
                      "sourcePath": "src/main/java",
                      "pattern": "**/target/site/jacoco/jacoco.xml"
                    }
                  ],
                  "name": "JaCoCo",
                  "maxScore": 100,
                  "missedPercentageImpact": -1
                },
                {
                  "tools": [
                    {
                      "id": "pit",
                      "name": "Mutation Coverage",
                      "metric": "mutation",
                      "sourcePath": "src/main/java",
                      "pattern": "**/target/pit-reports/mutations.xml"
                    }
                  ],
                  "name": "PIT",
                  "maxScore": 100,
                  "missedPercentageImpact": -1
                }
              ]
            }
      - name: Write metrics to GitHub output
        id: metrics
        run: |
          cat metrics.env >> "${GITHUB_OUTPUT}"
          mkdir -p badges
      - name: Generate the badge SVG image for the line coverage
        uses: emibcn/badge-action@v2.0.2
        with:
          label: 'Line Coverage'
          status: ${{ steps.metrics.outputs.line }}%
          color: 'green'
          path: badges/line-coverage.svg
      - name: Generate the badge SVG image for the branch coverage
        uses: emibcn/badge-action@v2.0.2
        with:
          label: 'Branch Coverage'
          status: ${{ steps.metrics.outputs.branch }}%
          color: 'green'
          path: badges/branch-coverage.svg
      - name: Generate the badge SVG image for the mutation coverage
        uses: emibcn/badge-action@v2.0.2
        with:
          label: 'Mutation Coverage'
          status: ${{ steps.metrics.outputs.mutation }}%
          color: 'green'
          path: badges/mutation-coverage.svg
      - name: Generate the badge SVG image for the warnings
        uses: emibcn/badge-action@v2.0.2
        with:
          label: 'Warnings'
          status: ${{ steps.metrics.outputs.warnings }}
          color: 'orange'
          path: badges/warnings.svg
      - name: Commit updated badges
        continue-on-error: true
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add badges/*.svg
          git commit -m "Update badges with results from latest autograding" || true
      - name: Push updated badges to GitHub repository
        uses: ad-m/github-push-action@master
        if: ${{ success() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
